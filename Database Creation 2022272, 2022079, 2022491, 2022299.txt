/*
Project contributions:
Table creation: Mahi, Masood
Data population: Shubham, Ankur
*/

DROP DATABASE IF EXISTS BlinkBasket;
CREATE DATABASE BlinkBasket;
USE BlinkBasket;

CREATE TABLE profile (
    profile_id INT PRIMARY KEY AUTO_INCREMENT,
    phone_no CHAR(10) NOT NULL CONSTRAINT customer_phone_valid CHECK (LENGTH(phone_no) = 10),
    address VARCHAR(255) NOT NULL
);
CREATE INDEX idx_profile_address ON profile(address);
-- Inserting data into the profile table
INSERT INTO profile (profile_id, phone_no, address) 
VALUES 
(101, '1234567890', '2000001'),
(102, '4567890123', '2000002'),
(103, '7890123456', '2000003'),
(104, '2345678901', '2000004'),
(105, '5678901234', '2000005'),
(106, '8901234567', '2000006'),
(107, '3456789012', '2000007'),
(108, '6789012345', '2000008'),
(109, '9012345678', '2000009'),
(110, '0123456789', '2000011');

CREATE TABLE delivery_partner (
    delivery_partner_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    contact CHAR(10) NOT NULL CONSTRAINT delivery_partner_contact_valid CHECK (LENGTH(contact) = 10)
);
-- Data entries for the delivery_partner table
INSERT INTO delivery_partner (delivery_partner_id, name, contact)
VALUES 
(1, 'Express Deliveries', '1234567890'),
(2, 'Speedy Shipments', '4567890123'),
(3, 'Swift Couriers', '7890123456'),
(4, 'Rapid Logistics', '2345678901'),
(5, 'Quick Cargo', '5678901234'),
(6, 'Fast Freight', '8901234567'),
(7, 'Instant Dispatch', '3456789012'),
(8, 'Prompt Parcel', '6789012345'),
(9, 'Hasty Haulers', '9012345678'),
(10, 'Blitz Delivery', '0123456789');

CREATE TABLE payment_method (
    payment_method_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    timing ENUM('Before', 'After') NOT NULL,
    type VARCHAR(255) NOT NULL
);
-- Data entries for the payment_method table
INSERT INTO payment_method (payment_method_id, name, timing, type)
VALUES 
(1, 'Credit Card', 'Before', 'UPI'),
(2, 'Debit Card', 'Before', 'COD'),
(3, 'PhonePe', 'Before', 'UPI'),
(4, 'Bharatpe', 'Before', 'UPI'),
(5, 'Cash on Delivery', 'After', 'COD'),
(6, 'Mobile Wallet', 'Before', 'UPI'),
(7, 'Bank Transfer', 'Before', 'Bank Transfer'),
(8, 'PayPal', 'Before', 'Online Payment'),
(9, 'Google Pay', 'Before', 'UPI'),
(10, 'Apple Pay', 'Before', 'UPI');

CREATE TABLE vendor (
    vendor_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    rating DECIMAL(3,2) CONSTRAINT vendor_rating_valid CHECK ((rating BETWEEN 0 AND 5) OR (rating IS NULL)),
    contact CHAR(10) NOT NULL CONSTRAINT vendor_contact_valid CHECK (LENGTH(contact) = 10),
    gst_number VARCHAR(255) NOT NULL,
    location VARCHAR(255) NOT NULL
);
CREATE INDEX idx_vendor_location_rating ON vendor(location, rating);
-- Data entries for the vendor table
INSERT INTO vendor (vendor_id, name, rating, contact, gst_number, location)
VALUES 
(1, 'ABC Electronics', 4.5, '1234567890', 'GST123456', '2000001'),
(2, 'XYZ Appliances', 4.2, '4567890123', 'GST789012', '2000002'),
(3, 'PQR Technologies', 4.7, '7890123456', 'GST345678', '2000003'),
(4, 'LMN Gadgets', 4.3, '2345678901', 'GST901234', '2000004'),
(5, 'DEF Solutions', 4.6, '5678901234', 'GST567890', '2000005'),
(6, 'GHI Electronics', 4.1, '8901234567', 'GST123890', '2000006'),
(7, 'JKL Appliances', 4.8, '3456789012', 'GST678901', '2000007'),
(8, 'MNO Technologies', 4.4, '6789012345', 'GST901567', '2000008'),
(9, 'RST Gadgets', 4.9, '9012345678', 'GST234567', '2000009'),
(10, 'UVW Solutions', 4.0, '0123456789', 'GST345012', '2000010');

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    contact CHAR(10) NOT NULL CONSTRAINT employee_contact_valid CHECK (LENGTH(contact) = 10)
);
-- Data entries for the employee table
INSERT INTO employee (employee_id, name, contact)
VALUES 
(1, 'John Smith', '1234567890'),
(2, 'Emily Johnson', '4567890123'),
(3, 'Michael Brown', '7890123456'),
(4, 'Emma Davis', '2345678901'),
(5, 'Daniel Wilson', '5678901234'),
(6, 'Olivia Martinez', '8901234567'),
(7, 'James Taylor', '3456789012'),
(8, 'Sophia Anderson', '6789012345'),
(9, 'William Jackson', '9012345678'),
(10, 'Isabella Harris', '0123456789');

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT,
    manager_employee_id INT,
    delivery_partner_id INT,
    location VARCHAR(255) NOT NULL,
	FOREIGN KEY (manager_employee_id) REFERENCES employee(employee_id) ON DELETE SET NULL,
    FOREIGN KEY (delivery_partner_id) REFERENCES delivery_partner(delivery_partner_id) ON DELETE CASCADE
);
CREATE INDEX idx_inventory_location ON inventory(location);

-- Data entries for the inventory table
INSERT INTO inventory (inventory_id, manager_employee_id, delivery_partner_id, location)
VALUES 
(1, 1, 1, '2000001'),
(2, 2, 2, '2000002'),
(3, 3, 3, '2000003'),
(4, 4, 4, '2000004'),
(5, 5, 5, '2000005'),
(6, 6, 6, '2000006'),
(7, 7, 7, '2000007'),
(8, 8, 8, '2000008'),
(9, 9, 9, '2000009'),
(10, 10, 10, '2000010');

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    profile_id INT NOT NULL,
    inventory_id INT,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
	FOREIGN KEY (profile_id) REFERENCES profile(profile_id),
	FOREIGN KEY (inventory_id ) REFERENCES inventory(inventory_id)
);

-- Data entries for the customer table
INSERT INTO customer (customer_id, profile_id, inventory_id, name, password) 
VALUES 
(1, 101, 1, 'John Doe', 'password123'),
(2, 102, 2, 'Jane Smith', 'securePass'),
(3, 103, 3, 'Alice Johnson', 'abc123'),
(4, 104, 4, 'Bob Brown', 'pass123word'),
(5, 105, 5, 'Eva Garcia', 'qwerty'),
(6, 106, 6, 'Michael Davis', 'p@ssw0rd'),
(7, 107, 7, 'Sarah Wilson', 'letmein'),
(8, 108, 8, 'David Lee', 'david123'),
(9, 109, 9, 'Emily Taylor', 'emilyPass'),
(10, 110, 10, 'James Brown', 'jamesb456');


CREATE TABLE payment (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    payment_method_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL CONSTRAINT payment_amount_positive CHECK (amount > 0),
    status ENUM('Pending', 'Completed', 'Failed') NOT NULL DEFAULT 'Pending',
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP,
    CONSTRAINT payment_end_time_null CHECK (status <> 'Completed' OR end_time IS NOT NULL),
    CONSTRAINT payment_end_time_consistent CHECK (end_time IS NULL OR end_time >= start_time),
	FOREIGN KEY (payment_method_id) REFERENCES payment_method(payment_method_id)
);
-- Data entries for the payment table
INSERT INTO payment (payment_id, payment_method_id, amount, status, start_time, end_time)
VALUES 
(1, 1, 100.00, 'Completed', '2024-02-10 08:00:00', '2024-02-10 08:15:00'),
(2, 2, 50.00, 'Pending', '2024-02-10 09:30:00', NULL),
(3, 3, 75.50, 'Completed', '2024-02-10 10:45:00', '2024-02-10 11:00:00'),
(4, 4, 30.00, 'Failed', '2024-02-10 11:30:00', NULL),
(5, 5, 65.25, 'Completed', '2024-02-10 12:45:00', '2024-02-10 13:00:00'),
(6, 6, 42.75, 'Pending', '2024-02-10 14:30:00', NULL),
(7, 7, 90.00, 'Completed', '2024-02-10 15:45:00', '2024-02-10 16:00:00'),
(8, 8, 120.50, 'Completed', '2024-02-10 17:30:00', '2024-02-10 17:45:00'),
(9, 9, 55.75, 'Failed', '2024-02-10 18:45:00', NULL),
(10, 10, 80.25, 'Completed', '2024-02-10 19:30:00', '2024-02-10 19:45:00');

CREATE TABLE helper (
    employee_id INT NOT NULL,
    inventory_id INT NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) ON DELETE CASCADE,
    FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id)
);
-- Data entries for the helper table
INSERT INTO helper (employee_id, inventory_id)
VALUES 
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(10, 10);


CREATE TABLE item (
    item_id INT PRIMARY KEY AUTO_INCREMENT,
    inventory_id INT NOT NULL,  -- Assuming there is an inventory table
    vendor_id INT NOT NULL,  -- Assuming there is a vendor table
    product_name VARCHAR(255) NOT NULL,
    availability BOOLEAN NOT NULL DEFAULT TRUE,
    threshold_quantity INT NOT NULL CONSTRAINT item_threshold_nonnegative CHECK (threshold_quantity >= 0),
    expiry_date DATE NOT NULL,
    price DECIMAL(10,2) NOT NULL CONSTRAINT item_price_positive CHECK (price > 0),
    FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id),
	FOREIGN KEY (vendor_id) REFERENCES vendor(vendor_id)
);
CREATE INDEX idx_item_available_product ON item(product_name, availability);
-- Data entries for the item table
INSERT INTO item (item_id, inventory_id, vendor_id, product_name, availability, threshold_quantity, expiry_date, price)
VALUES 
(1, 1, 1, 'Egg', TRUE, 20, '2024-03-01', 199.99),
(2, 2, 2, 'Bread', TRUE, 15, '2024-02-28', 149.99),
(3, 3, 3, 'Oats', TRUE, 30, '2024-03-05', 299.99),
(4, 4, 4, 'Milk', TRUE, 25, '2024-03-10', 249.99),
(5, 5, 5, 'Biscuits', TRUE, 40, '2024-03-15', 199.99),
(6, 6, 6, 'Juices', TRUE, 10, '2024-03-20', 349.99),
(7, 7, 7, 'Herbal Tea', TRUE, 50, '2024-03-25', 299.99),
(8, 8, 8, 'Dog food', TRUE, 35, '2024-03-30', 199.99),
(9, 9, 9, 'Medicine', TRUE, 45, '2024-04-01', 249.99),
(10, 10, 10, 'Chips', TRUE, 20, '2024-04-05', 149.99);

CREATE TABLE wishlist (
    wishlist_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,  -- Assuming there is a customers table
    name VARCHAR(255) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE CASCADE
);
-- Data entries for the wishlist table
INSERT INTO wishlist (wishlist_id, customer_id, name)
VALUES 
(1, 1, 'Wishlist 1'),
(2, 2, 'Wishlist 2'),
(3, 3, 'Wishlist 3'),
(4, 4, 'Wishlist 4'),
(5, 5, 'Wishlist 5'),
(6, 6, 'Wishlist 6'),
(7, 7, 'Wishlist 7'),
(8, 8, 'Wishlist 8'),
(9, 9, 'Wishlist 9'),
(10, 10, 'Wishlist 10');

CREATE TABLE cart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    name VARCHAR(255) NOT NULL,
    created_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE SET NULL
);
-- Data entries for the cart table
INSERT INTO cart (cart_id, customer_id, name, created_time)
VALUES 
(1, 1, 'Cart 1', '2024-02-10 08:00:00'),
(2, 2, 'Cart 2', '2024-02-10 09:30:00'),
(3, 3, 'Cart 3', '2024-02-10 10:45:00'),
(4, 4, 'Cart 4', '2024-02-10 11:30:00'),
(5, 5, 'Cart 5', '2024-02-10 12:45:00'),
(6, 6, 'Cart 6', '2024-02-10 14:30:00'),
(7, 7, 'Cart 7', '2024-02-10 15:45:00'),
(8, 8, 'Cart 8', '2024-02-10 17:30:00'),
(9, 9, 'Cart 9', '2024-02-10 18:45:00'),
(10, 10, 'Cart 10', '2024-02-10 19:30:00');

CREATE TABLE wishlist_item (
    wishlist_id INT NOT NULL,
    item_id INT NOT NULL,
    FOREIGN KEY (wishlist_id) REFERENCES wishlist(wishlist_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES item(item_id)
);

-- Data entries for the wishlist_item table
INSERT INTO wishlist_item (wishlist_id, item_id)
VALUES 
(1, 1),
(1, 2),
(2, 3),
(2, 4),
(3, 5),
(3, 6),
(4, 7),
(4, 8),
(5, 9),
(5, 10);

CREATE TABLE cart_item (
    cart_id INT NOT NULL,
    item_id INT NOT NULL, 
    FOREIGN KEY (cart_id) REFERENCES cart(cart_id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES item(item_id)
);
-- Data entries for the cart_item table
INSERT INTO cart_item (cart_id, item_id)
VALUES 
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(10, 10);

CREATE TABLE subscription (
    subscription_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,-- Assuming there is a customers tablecart_id INT
    cart_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    duration INT NOT NULL CONSTRAINT subscription_duration_positive CHECK (duration > 0),
    start_date DATE NOT NULL,
    end_date DATE,
    CONSTRAINT subscription_end_date_consistent CHECK (end_date IS NULL OR end_date >= start_date),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (cart_id) REFERENCES cart_item(cart_id)
);

-- UPDATE subscription
-- SET name = 'name_'; 
-- Data entries for the subscription table
INSERT INTO subscription (subscription_id, customer_id, cart_id, name, duration, start_date, end_date)
VALUES 
(1, 1, 1, 'Subscription 1', 30, '2024-02-10', '2024-03-11'),
(2, 2, 2, 'Subscription 2', 60, '2024-02-10', '2024-04-10'),
(3, 3, 3, 'Subscription 3', 90, '2024-02-10', '2024-05-10'),
(4, 4, 4, 'Subscription 4', 30, '2024-02-10', '2024-03-11'),
(5, 5, 5, 'Subscription 5', 60, '2024-02-10', '2024-04-10'),
(6, 6, 6, 'Subscription 6', 90, '2024-02-10', '2024-05-10'),
(7, 7, 7, 'Subscription 7', 30, '2024-02-10', '2024-03-11'),
(8, 8, 8, 'Subscription 8', 60, '2024-02-10', '2024-04-10'),
(9, 9, 9, 'Subscription 9', 90, '2024-02-10', '2024-05-10'),
(10, 10, 10, 'Subscription 10', 30, '2024-02-10', '2024-03-11');

CREATE TABLE orderr (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    payment_id INT,
    cart_id INT NOT NULL,
    customer_id INT,
    created_time TIMESTAMP NOT NULL,
    status ENUM('Pending', 'Completed', 'Failed') NOT NULL DEFAULT 'Pending',
    instructions TEXT NOT NULL,
    subtotal DECIMAL(10, 2) NOT NULL CONSTRAINT order_subtotal_positive CHECK (subtotal > 0),
    delivery_charge DECIMAL(10, 2) NOT NULL CONSTRAINT order_delivery_charge_nonnegative CHECK (delivery_charge >= 0),
    amount_saved DECIMAL(10, 2) NOT NULL CONSTRAINT order_amount_saved_nonnegative CHECK (amount_saved >= 0) DEFAULT 0,
    total DECIMAL(10, 2) NOT NULL CONSTRAINT order_total_positive CHECK (total > 0),
	CONSTRAINT order_total_consistent CHECK (total = subtotal + delivery_charge - amount_saved),
    FOREIGN KEY (payment_id) REFERENCES payment(payment_id),
    FOREIGN KEY (cart_id) REFERENCES cart(cart_id),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE SET NULL
);

-- Data entries for the orderr table
INSERT INTO orderr (order_id, payment_id, cart_id, customer_id, created_time, status, instructions, subtotal, delivery_charge, amount_saved, total)
VALUES 
(1, 1, 1, 1, '2024-02-10 08:00:00', 'Completed', 'Handle with care', 100.00, 5.00, 10.00, 95.00),
(2, 2, 2, 2, '2024-02-10 09:30:00', 'Pending', 'No special instructions', 50.00, 2.50, 0.00, 52.50),
(3, 3, 3, 3, '2024-02-10 10:45:00', 'Completed', 'Deliver before 12 PM', 75.50, 3.75, 5.00, 74.25),
(4, 4, 4, 4, '2024-02-10 11:30:00', 'Failed', 'Contact on arrival', 30.00, 1.50, 0.00, 31.50),
(5, 5, 5, 5, '2024-02-10 12:45:00', 'Completed', 'Leave at the doorstep', 65.25, 3.25, 7.50, 61.00),
(6, 6, 6, 6, '2024-02-10 14:30:00', 'Pending', 'Call before delivery', 42.75, 2.15, 0.00, 44.90),
(7, 7, 7, 7, '2024-02-10 15:45:00', 'Completed', 'No special instructions', 90.00, 4.50, 15.00, 79.50),
(8, 8, 8, 8, '2024-02-10 17:30:00', 'Completed', 'Handle with care', 120.50, 6.00, 20.00, 106.50),
(9, 9, 9, 9, '2024-02-10 18:45:00', 'Failed', 'Contact on arrival', 55.75, 2.80, 0.00, 58.55),
(10, 10, 10, 10, '2024-02-10 19:30:00', 'Completed', 'Leave at the doorstep', 80.25, 4.00, 10.00, 74.25);

CREATE TABLE coupon (
    coupon_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    type ENUM('Percentage', 'Flat') NOT NULL,
    code VARCHAR(255) NOT NULL UNIQUE CONSTRAINT coupon_code_long CHECK (LENGTH(code) >= 3),
    company VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    amount DECIMAL(10,2) NOT NULL CONSTRAINT coupon_amount_nonnegative CHECK (amount >= 0),
    valid BOOLEAN NOT NULL DEFAULT TRUE,
    CONSTRAINT coupon_usage_consistent CHECK (valid = TRUE OR order_id IS NOT NULL),
    FOREIGN KEY (order_id) REFERENCES orderr(order_id)
);

-- Data entries for the coupon table
INSERT INTO coupon (coupon_id, order_id, type, code, company, description, amount, valid)
VALUES 
(1, 1, 'Percentage', 'DISC10', 'Discount Mart', 'Get 10% off on your next purchase', 10.00, true),
(2, 2, 'Flat', 'PROMO20', 'Promo World', 'Avail $20 discount', 20.00, true),
(3, 3, 'Flat', 'GIFT50', 'Gift Emporium', 'Redeem this voucher to get $50 off', 50.00, true),
(4, 4, 'Flat', 'SAVE15', 'Save More', 'Save $15 ', 15.00, true),
(5, 5, 'Flat', 'SPRING25', 'Spring Sale', 'Spring sale! Get $25 off', 25.00, true),
(6, 6, 'Flat', 'GIFT10', 'Gift Emporium', 'Use this voucher to avail $10 discount', 10.00, true),
(7, 7, 'Flat', 'SAVE20', 'Save More', 'Save $20 ', 20.00, true),
(8, 8, 'Flat', 'SUMMER15', 'Summer Sale', 'Summer sale! Get $15 off ', 15.00, true),
(9, 9, 'Flat', 'GIFT30', 'Gift Emporium', 'Redeem this voucher to get $30 off', 30.00, true),
(10, 10, 'Flat', 'SAVE10', 'Save More', 'Save $10', 10.00, true);

Select * From delivery_partner;
select * from employee;
SELECT * FROM customer;
SELECT * FROM inventory;
SELECT * FROM payment_method;
SELECT * FROM payment;
SELECT * FROM vendor;
SELECT * FROM payment;
SELECT * FROM cart;
SELECT * FROM item;
SELECT * FROM cart_item;
SELECT * FROM subscription;
SELECT * FROM wishlist;
SELECT * FROM wishlist_item;
SELECT * FROM helper;
SELECT * FROM orderr;
SELECT * FROM coupon;
SHOW TABLES;